---
import Layout from "../../layouts/Layout.astro";
import Tags from "../../components/Tags.astro";

import { getCollection, getEntries } from "astro:content";

export const prerender = true;
const { slug } = Astro.params;

const recipes = await getCollection("recipes");

const tags = recipes
  .map((recipe) => recipe.data.tags)
  .flat()
  .reduce<{ [key: string]: number }>(function (result, c) {
    var count = result[c] || 0;
    result[c] = count + 1;
    return result;
  }, {});

export async function getStaticPaths() {
  const recipes = await getCollection("recipes");
  return [...new Set(recipes.map((recipe) => recipe.data.tags).flat())].map(
    (tag) => ({
      params: { slug: tag },
    })
  );
}

if (!slug) {
  return Astro.redirect("/404");
}

const allRecipesWithTag = await getCollection("recipes", (recipe) =>
  recipe.data.tags.some((tag) => tag === slug)
);

const sortRecipes = (recipes) => {
  recipes.sort((a, b) => {
    const nameA = a.title.toUpperCase(); // ignore upper and lowercase
    const nameB = b.title.toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }

    // names must be equal
    return 0;
  });
};

const entries = allRecipesWithTag.map((post) => ({
  id: post.id,
  title: post.data.title,
}));

sortRecipes(entries);

if (allRecipesWithTag.length === 0) {
  return Astro.redirect("/404");
}
---

<Layout>
  <section>
    {(<Tags tags={tags} slug={slug} />)}
    <h1 class="text-2xl font-bold mb-6">
      {slug} recipes
    </h1>

    <ul>
      {
        entries.map((post) => {
          return (
            <li>
              <a class="relative" href={`/recipes/${post.id}/`}>
                {post.title}
              </a>
            </li>
          );
        })
      }
    </ul>
  </section>
</Layout>
